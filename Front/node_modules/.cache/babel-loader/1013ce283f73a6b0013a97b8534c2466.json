{"ast":null,"code":"import _classCallCheck from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/emine.turcan/Projekt/MaCha/Front/src/UploadScreen.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n/*\nScreen:LoginScreen\nLoginscreen is the main screen which the user is shown on first visit to page and after\nhitting logout\n*/\n\nimport LoginScreen from './Loginscreen';\n/*\nModule:Material-UI\nMaterial-UI is used for designing ui of the app\n*/\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Drawer from 'material-ui/Drawer';\nimport MenuItem from 'material-ui/MenuItem';\nimport FontIcon from 'material-ui/FontIcon';\nimport { blue500, red500, greenA200 } from 'material-ui/styles/colors';\nvar apiBaseUrl = \"http://localhost:4000/api/\";\n/*\nModule:Dropzone\nDropzone is used for local file selection\n*/\n\nimport Dropzone from 'react-dropzone';\n/*\nModule:superagent\nsuperagent is used to handle post/get requests to server\n*/\n\nvar request = require('superagent');\n\nvar UploadScreen =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UploadScreen, _Component);\n\n  function UploadScreen(props) {\n    var _this;\n\n    _classCallCheck(this, UploadScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UploadScreen).call(this, props));\n    _this.state = {\n      role: 'student',\n      filesPreview: [],\n      filesToBeSent: [],\n      draweropen: false,\n      printcount: 10,\n      printingmessage: '',\n      printButtonDisabled: false\n    };\n    return _this;\n  }\n\n  _createClass(UploadScreen, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      // console.log(\"prop values\",this.props.role);\n      var printcount; //set upload limit based on user role\n\n      if (this.props.role) {\n        if (this.props.role == 'student') {\n          printcount = 5;\n        } else if (this.props.role == 'teacher') {\n          printcount = 10;\n        }\n      }\n\n      this.setState({\n        printcount: printcount,\n        role: this.props.role\n      });\n    }\n    /*\n    Function:handleCloseClick\n    Parameters: event,index\n    Usage:This fxn is used to remove file from filesPreview div\n    if user clicks close icon adjacent to selected file\n    */\n\n  }, {\n    key: \"handleCloseClick\",\n    value: function handleCloseClick(event, index) {\n      var _this2 = this;\n\n      // console.log(\"filename\",index);\n      var filesToBeSent = this.state.filesToBeSent;\n      filesToBeSent.splice(index, 1); // console.log(\"files\",filesToBeSent);\n\n      var filesPreview = [];\n\n      for (var i in filesToBeSent) {\n        filesPreview.push(React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, filesToBeSent[i][0].name, React.createElement(MuiThemeProvider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(FontIcon, {\n          className: \"material-icons customstyle\",\n          color: blue500,\n          onClick: function onClick(event) {\n            return _this2.handleCloseClick(event, i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, \"clear\")))));\n      }\n\n      this.setState({\n        filesToBeSent: filesToBeSent,\n        filesPreview: filesPreview\n      });\n    }\n    /*\n    Function:onDrop\n    Parameters: acceptedFiles, rejectedFiles\n    Usage:This fxn is default event handler of react drop-Dropzone\n    which is modified to update filesPreview div\n    */\n\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(acceptedFiles, rejectedFiles) {\n      var _this3 = this;\n\n      // console.log('Accepted files: ', acceptedFiles[0].name);\n      var filesToBeSent = this.state.filesToBeSent;\n\n      if (filesToBeSent.length < this.state.printcount) {\n        filesToBeSent.push(acceptedFiles);\n        var filesPreview = [];\n\n        for (var i in filesToBeSent) {\n          filesPreview.push(React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100\n            },\n            __self: this\n          }, filesToBeSent[i][0].name, React.createElement(MuiThemeProvider, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            href: \"#\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, React.createElement(FontIcon, {\n            className: \"material-icons customstyle\",\n            color: blue500,\n            styles: {\n              top: 10\n            },\n            onClick: function onClick(event) {\n              return _this3.handleCloseClick(event, i);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, \"clear\")))));\n        }\n\n        this.setState({\n          filesToBeSent: filesToBeSent,\n          filesPreview: filesPreview\n        });\n      } else {\n        alert(\"You have reached the limit of printing files at a time\");\n      } // console.log('Rejected files: ', rejectedFiles);\n\n    }\n    /*\n      Function:handleClick\n      Parameters: event\n      Usage:This fxn is handler of submit button which is responsibel fo rhandling file uploads\n      to backend\n    */\n\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      // console.log(\"handleClick\",event);\n      this.setState({\n        printingmessage: \"Please wait until your files are being printed\",\n        printButtonDisabled: true\n      });\n      var self = this;\n\n      if (this.state.filesToBeSent.length > 0) {\n        var filesArray = this.state.filesToBeSent;\n        var req = request.post(apiBaseUrl + 'fileprint');\n\n        for (var i in filesArray) {\n          // console.log(\"files\",filesArray[i][0]);\n          req.attach(filesArray[i][0].name, filesArray[i][0]);\n        }\n\n        req.end(function (err, res) {\n          if (err) {\n            console.log(\"error ocurred\");\n          }\n\n          console.log(\"res\", res);\n          self.setState({\n            printingmessage: '',\n            printButtonDisabled: false,\n            filesToBeSent: [],\n            filesPreview: []\n          });\n          alert(\"File printing completed\"); // self.props.indexthis.switchPage();\n        });\n      } else {\n        alert(\"Please upload some files first\");\n      }\n    }\n    /*\n      Function:toggleDrawer\n      Parameters: event\n      Usage:This fxn is used to toggle drawer state\n      */\n\n  }, {\n    key: \"toggleDrawer\",\n    value: function toggleDrawer(event) {\n      // console.log(\"drawer click\");\n      this.setState({\n        draweropen: !this.state.draweropen\n      });\n    }\n    /*\n      Function:toggleDrawer\n      Parameters: event\n      Usage:This fxn is used to close the drawer when user clicks anywhere on the \n      main div\n      */\n\n  }, {\n    key: \"handleDivClick\",\n    value: function handleDivClick(event) {\n      // console.log(\"event\",event);\n      if (this.state.draweropen) {\n        this.setState({\n          draweropen: false\n        });\n      }\n    }\n    /*\n      Function:handleLogout\n      Parameters: event\n      Usage:This fxn is used to end user session and redirect the user back to login page\n      */\n\n  }, {\n    key: \"handleLogout\",\n    value: function handleLogout(event) {\n      // console.log(\"logout event fired\",this.props);\n      var loginPage = [];\n      loginPage.push(React.createElement(LoginScreen, {\n        appContext: this.props.appContext,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }));\n      this.props.appContext.setState({\n        loginPage: loginPage,\n        uploadScreen: []\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: function onClick(event) {\n          return _this4.handleDivClick(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"You can print upto \", this.state.printcount, \" files at a time since you are \", this.state.role), React.createElement(Dropzone, {\n        onDrop: function onDrop(files) {\n          return _this4.onDrop(files);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Try dropping some files here, or click to select files to upload.\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Files to be printed are:\", this.state.filesPreview)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, this.state.printingmessage), React.createElement(MuiThemeProvider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(RaisedButton, {\n        disabled: this.state.printButtonDisabled,\n        label: \"Print Files\",\n        primary: true,\n        style: style,\n        onClick: function onClick(event) {\n          return _this4.handleClick(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return UploadScreen;\n}(Component);\n\nvar style = {\n  margin: 15\n};\nexport default UploadScreen;","map":{"version":3,"sources":["/Users/emine.turcan/Projekt/MaCha/Front/src/UploadScreen.js"],"names":["React","Component","LoginScreen","MuiThemeProvider","AppBar","RaisedButton","Drawer","MenuItem","FontIcon","blue500","red500","greenA200","apiBaseUrl","Dropzone","request","require","UploadScreen","props","state","role","filesPreview","filesToBeSent","draweropen","printcount","printingmessage","printButtonDisabled","setState","event","index","splice","i","push","name","handleCloseClick","acceptedFiles","rejectedFiles","length","top","alert","self","filesArray","req","post","attach","end","err","res","console","log","loginPage","appContext","uploadScreen","handleDivClick","files","onDrop","style","handleClick","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n/*\nScreen:LoginScreen\nLoginscreen is the main screen which the user is shown on first visit to page and after\nhitting logout\n*/\nimport LoginScreen from './Loginscreen';\n/*\nModule:Material-UI\nMaterial-UI is used for designing ui of the app\n*/\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Drawer from 'material-ui/Drawer';\nimport MenuItem from 'material-ui/MenuItem';\nimport FontIcon from 'material-ui/FontIcon';\nimport {blue500, red500, greenA200} from 'material-ui/styles/colors';\n\nvar apiBaseUrl = \"http://localhost:4000/api/\";\n/*\nModule:Dropzone\nDropzone is used for local file selection\n*/\nimport Dropzone from 'react-dropzone';\n/*\nModule:superagent\nsuperagent is used to handle post/get requests to server\n*/\nvar request = require('superagent');\n\nclass UploadScreen extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      role:'student',\n      filesPreview:[],\n      filesToBeSent:[],\n      draweropen:false,\n      printcount:10,\n      printingmessage:'',\n      printButtonDisabled:false\n    }\n  }\n  componentWillMount(){\n    // console.log(\"prop values\",this.props.role);\n    var printcount;\n    //set upload limit based on user role\n    if(this.props.role){\n      if(this.props.role == 'student'){\n        printcount = 5;\n      }\n      else if(this.props.role == 'teacher'){\n        printcount =10;\n      }\n    }\n    this.setState({printcount,role:this.props.role});\n  }\n  /*\n  Function:handleCloseClick\n  Parameters: event,index\n  Usage:This fxn is used to remove file from filesPreview div\n  if user clicks close icon adjacent to selected file\n  */ \n  handleCloseClick(event,index){\n    // console.log(\"filename\",index);\n    var filesToBeSent=this.state.filesToBeSent;\n    filesToBeSent.splice(index,1);\n    // console.log(\"files\",filesToBeSent);\n    var filesPreview=[];\n    for(var i in filesToBeSent){\n      filesPreview.push(<div>\n        {filesToBeSent[i][0].name}\n        <MuiThemeProvider>\n        <a href=\"#\"><FontIcon\n          className=\"material-icons customstyle\"\n          color={blue500}\n          onClick={(event) => this.handleCloseClick(event,i)}\n        >clear</FontIcon></a>\n        </MuiThemeProvider>\n        </div>\n      )\n    }\n    this.setState({filesToBeSent,filesPreview});\n  }\n  /*\n  Function:onDrop\n  Parameters: acceptedFiles, rejectedFiles\n  Usage:This fxn is default event handler of react drop-Dropzone\n  which is modified to update filesPreview div\n  */\n  onDrop(acceptedFiles, rejectedFiles) {\n      // console.log('Accepted files: ', acceptedFiles[0].name);\n      var filesToBeSent=this.state.filesToBeSent;\n      if(filesToBeSent.length < this.state.printcount){\n        filesToBeSent.push(acceptedFiles);\n        var filesPreview=[];\n        for(var i in filesToBeSent){\n          filesPreview.push(<div>\n            {filesToBeSent[i][0].name}\n            <MuiThemeProvider>\n            <a href=\"#\"><FontIcon\n              className=\"material-icons customstyle\"\n              color={blue500}\n              styles={{ top:10,}}\n              onClick={(event) => this.handleCloseClick(event,i)}\n            >clear</FontIcon></a>\n            </MuiThemeProvider>\n            </div>\n          )\n        }\n        this.setState({filesToBeSent,filesPreview});\n      }\n      else{\n        alert(\"You have reached the limit of printing files at a time\")\n      }\n\n      // console.log('Rejected files: ', rejectedFiles);\n}\n/*\n  Function:handleClick\n  Parameters: event\n  Usage:This fxn is handler of submit button which is responsibel fo rhandling file uploads\n  to backend\n*/\nhandleClick(event){\n  // console.log(\"handleClick\",event);\n  this.setState({printingmessage:\"Please wait until your files are being printed\",printButtonDisabled:true})\n  var self = this;\n  if(this.state.filesToBeSent.length>0){\n    var filesArray = this.state.filesToBeSent;\n    var req = request.post(apiBaseUrl+'fileprint');\n    for(var i in filesArray){\n        // console.log(\"files\",filesArray[i][0]);\n        req.attach(filesArray[i][0].name,filesArray[i][0])\n    }\n    req.end(function(err,res){\n      if(err){\n        console.log(\"error ocurred\");\n      }\n      console.log(\"res\",res);\n      self.setState({printingmessage:'',printButtonDisabled:false,filesToBeSent:[],filesPreview:[]});\n      alert(\"File printing completed\")\n      // self.props.indexthis.switchPage();\n    });\n  }\n  else{\n    alert(\"Please upload some files first\");\n  }\n}\n/*\n  Function:toggleDrawer\n  Parameters: event\n  Usage:This fxn is used to toggle drawer state\n  */\ntoggleDrawer(event){\n  // console.log(\"drawer click\");\n  this.setState({draweropen: !this.state.draweropen})\n}\n/*\n  Function:toggleDrawer\n  Parameters: event\n  Usage:This fxn is used to close the drawer when user clicks anywhere on the \n  main div\n  */\nhandleDivClick(event){\n  // console.log(\"event\",event);\n  if(this.state.draweropen){\n    this.setState({draweropen:false})\n  }\n}\n/*\n  Function:handleLogout\n  Parameters: event\n  Usage:This fxn is used to end user session and redirect the user back to login page\n  */\nhandleLogout(event){\n  // console.log(\"logout event fired\",this.props);\n  var loginPage =[];\n  loginPage.push(<LoginScreen appContext={this.props.appContext}/>);\n  this.props.appContext.setState({loginPage:loginPage,uploadScreen:[]})\n}\n  render() {\n    return (\n      <div className=\"App\">\n          <div onClick={(event) => this.handleDivClick(event)}>\n          <center>\n          <div>\n            You can print upto {this.state.printcount} files at a time since you are {this.state.role}\n          </div>\n\n          <Dropzone onDrop={(files) => this.onDrop(files)}>\n                <div>Try dropping some files here, or click to select files to upload.</div>\n          </Dropzone>\n          <div>\n          Files to be printed are:\n          {this.state.filesPreview}\n          </div>\n          </center>\n          <div>\n          {this.state.printingmessage}\n          </div>\n      <MuiThemeProvider>\n           <RaisedButton disabled={this.state.printButtonDisabled} label=\"Print Files\" primary={true} style={style} onClick={(event) => this.handleClick(event)}/>\n      </MuiThemeProvider>\n          </div>\n          </div>\n    );\n  }\n}\n\nconst style = {\n  margin: 15,\n};\n\nexport default UploadScreen;"]},"metadata":{},"sourceType":"module"}