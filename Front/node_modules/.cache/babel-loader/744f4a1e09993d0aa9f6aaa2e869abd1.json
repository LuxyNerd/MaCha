{"ast":null,"code":"import _regeneratorRuntime from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { GET_ERRORS } from './types';\nexport var addPT = function addPT(project_task, history) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return axios.post('http://localhost:8080/api/board', project_task);\n\n              case 3:\n                history.push('/'); // just back on projectBoard\n\n                dispatch({\n                  type: GET_ERRORS,\n                  payload: {}\n                });\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                dispatch({\n                  type: GET_ERRORS,\n                  payload: _context.t0.response.data\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/emine.turcan/Projekt/MaCha/Front/src/actions/projectTaskActions.js"],"names":["axios","GET_ERRORS","addPT","project_task","history","dispatch","post","push","type","payload","response","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,SAA3B;AAEA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,YAAD,EAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA2B,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEtCL,KAAK,CAACM,IAAN,CAAW,iCAAX,EAA8CH,YAA9C,CAFsC;;AAAA;AAG5CC,gBAAAA,OAAO,CAACG,IAAR,CAAa,GAAb,EAH4C,CAGzB;;AACnBF,gBAAAA,QAAQ,CAAC;AACPG,kBAAAA,IAAI,EAAEP,UADC;AAEPQ,kBAAAA,OAAO,EAAE;AAFF,iBAAD,CAAR;AAJ4C;AAAA;;AAAA;AAAA;AAAA;AAS5CJ,gBAAAA,QAAQ,CAAC;AACPG,kBAAAA,IAAI,EAAEP,UADC;AAEPQ,kBAAAA,OAAO,EAAE,YAAMC,QAAN,CAAeC;AAFjB,iBAAD,CAAR;;AAT4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA3B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd","sourcesContent":["import axios from 'axios';\nimport { GET_ERRORS } from './types';\n\nexport const addPT = (project_task, history) => async dispatch => {\n  try {\n    await axios.post('http://localhost:8080/api/board', project_task);\n    history.push('/'); // just back on projectBoard\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}