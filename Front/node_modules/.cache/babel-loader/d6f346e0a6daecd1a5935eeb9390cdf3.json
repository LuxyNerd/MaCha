{"ast":null,"code":"import _classCallCheck from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/emine.turcan/Projekt/MaCha/Front/src/AuthenticationForm/UploadScreen.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n/*\nScreen:LoginScreen\nLoginscreen is the main screen which the user is shown on first visit to page and after\nhitting logout\n*/\n\nimport LoginScreen from './Loginscreen';\n/*\nModule:Material-UI\nMaterial-UI is used for designing ui of the app\n*/\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Drawer from 'material-ui/Drawer';\nimport MenuItem from 'material-ui/MenuItem';\nimport FontIcon from 'material-ui/FontIcon';\nimport { blue500, red500, greenA200 } from 'material-ui/styles/colors';\n/*\nModule:Dropzone\nDropzone is used for local file selection\n*/\n\nimport Dropzone from 'react-dropzone';\nvar apiBaseUrl = 'http://localhost:3000/api/';\n/*\nModule:superagent\nsuperagent is used to handle post/get requests to server\n*/\n\nvar request = require('superagent');\n\nvar UploadScreen =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UploadScreen, _Component);\n\n  function UploadScreen(props) {\n    var _this;\n\n    _classCallCheck(this, UploadScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UploadScreen).call(this, props));\n    _this.state = {\n      role: 'user',\n      filesPreview: [],\n      filesToBeSent: [],\n      draweropen: false,\n      printcount: 10,\n      printingmessage: '',\n      printButtonDisabled: false\n    };\n    return _this;\n  }\n\n  _createClass(UploadScreen, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      // console.log(\"prop values\",this.props.role);\n      var printcount; //set upload limit based on user role\n\n      if (this.props.role) {\n        if (this.props.role == 'user') {\n          printcount = 5;\n        } else if (this.props.role == 'teacher') {\n          printcount = 10;\n        }\n      }\n\n      this.setState({\n        printcount: printcount,\n        role: this.props.role\n      });\n    }\n    /*\n    Function:handleCloseClick\n    Parameters: event,index\n    Usage:This fxn is used to remove file from filesPreview div\n    if user clicks close icon adjacent to selected file\n    */\n\n  }, {\n    key: \"handleCloseClick\",\n    value: function handleCloseClick(event, index) {\n      var _this2 = this;\n\n      // console.log(\"filename\",index);\n      var filesToBeSent = this.state.filesToBeSent;\n      filesToBeSent.splice(index, 1); // console.log(\"files\",filesToBeSent);\n\n      var filesPreview = [];\n\n      for (var i in filesToBeSent) {\n        filesPreview.push(React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, filesToBeSent[i][0].name, React.createElement(MuiThemeProvider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(FontIcon, {\n          className: \"material-icons customstyle\",\n          color: blue500,\n          onClick: function onClick(event) {\n            return _this2.handleCloseClick(event, i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, \"clear\")))));\n      }\n\n      this.setState({\n        filesToBeSent: filesToBeSent,\n        filesPreview: filesPreview\n      });\n    }\n    /*\n    Function:onDrop\n    Parameters: acceptedFiles, rejectedFiles\n    Usage:This fxn is default event handler of react drop-Dropzone\n    which is modified to update filesPreview div\n    */\n\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(acceptedFiles, rejectedFiles) {\n      var _this3 = this;\n\n      // console.log('Accepted files: ', acceptedFiles[0].name);\n      var filesToBeSent = this.state.filesToBeSent;\n\n      if (filesToBeSent.length < this.state.printcount) {\n        filesToBeSent.push(acceptedFiles);\n        var filesPreview = [];\n\n        for (var i in filesToBeSent) {\n          filesPreview.push(React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106\n            },\n            __self: this\n          }, filesToBeSent[i][0].name, React.createElement(MuiThemeProvider, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            href: \"#\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          }, React.createElement(FontIcon, {\n            className: \"material-icons customstyle\",\n            color: blue500,\n            styles: {\n              top: 10\n            },\n            onClick: function onClick(event) {\n              return _this3.handleCloseClick(event, i);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110\n            },\n            __self: this\n          }, \"clear\")))));\n        }\n\n        this.setState({\n          filesToBeSent: filesToBeSent,\n          filesPreview: filesPreview\n        });\n      } else {\n        alert('You have reached the limit of printing files at a time');\n      } // console.log('Rejected files: ', rejectedFiles);\n\n    }\n    /*\n    Function:handleClick\n    Parameters: event\n    Usage:This fxn is handler of submit button which is responsibel fo rhandling file uploads\n    to backend\n    */\n\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      this.setState({\n        printingmessage: 'Please wait until your files are being printed',\n        printButtonDisabled: true\n      });\n      var self = this;\n\n      if (this.state.filesToBeSent.length > 0) {\n        var filesArray = this.state.filesToBeSent;\n        var req = request.post(apiBaseUrl + 'fileprint');\n\n        for (var i in filesArray) {\n          req.attach(filesArray[i][0].name, filesArray[i][0]);\n        }\n\n        req.end(function (err, res) {\n          if (err) {\n            console.log('error ocurred');\n          }\n\n          console.log('res', res);\n          self.setState({\n            printingmessage: '',\n            printButtonDisabled: false,\n            filesToBeSent: [],\n            filesPreview: []\n          });\n          alert('File printing completed'); // self.props.indexthis.switchPage();\n        });\n      } else {\n        alert('Please upload some files first');\n      }\n    }\n    /*\n    Function:toggleDrawer\n    Parameters: event\n    Usage:This fxn is used to toggle drawer state\n    */\n\n  }, {\n    key: \"toggleDrawer\",\n    value: function toggleDrawer(event) {\n      this.setState({\n        draweropen: !this.state.draweropen\n      });\n    }\n    /*\n    Function:toggleDrawer\n    Parameters: event\n    Usage:This fxn is used to close the drawer when user clicks anywhere on the \n    main div\n    */\n\n  }, {\n    key: \"handleDivClick\",\n    value: function handleDivClick(event) {\n      if (this.state.draweropen) {\n        this.setState({\n          draweropen: false\n        });\n      }\n    }\n    /*\n    Function:handleLogout\n    Parameters: event\n    Usage:This fxn is used to end user session and redirect the user back to login page\n    */\n\n  }, {\n    key: \"handleLogout\",\n    value: function handleLogout(event) {\n      var loginPage = [];\n      loginPage.push(React.createElement(LoginScreen, {\n        appContext: this.props.appContext,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }));\n      this.props.appContext.setState({\n        loginPage: loginPage,\n        uploadScreen: []\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: function onClick(event) {\n          return _this4.handleDivClick(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"You can print upto \", this.state.printcount, \" files at a time since you are \", this.state.role), React.createElement(Dropzone, {\n        onDrop: function onDrop(files) {\n          return _this4.onDrop(files);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Try dropping some files here, or click to select files to upload.\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Files to be printed are:\", this.state.filesPreview)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, this.state.printingmessage), React.createElement(MuiThemeProvider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(RaisedButton, {\n        disabled: this.state.printButtonDisabled,\n        label: \"Print Files\",\n        primary: true,\n        style: style,\n        onClick: function onClick(event) {\n          return _this4.handleClick(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return UploadScreen;\n}(Component);\n\nvar style = {\n  margin: 15\n};\nexport default UploadScreen;","map":{"version":3,"sources":["/Users/emine.turcan/Projekt/MaCha/Front/src/AuthenticationForm/UploadScreen.js"],"names":["React","Component","LoginScreen","MuiThemeProvider","AppBar","RaisedButton","Drawer","MenuItem","FontIcon","blue500","red500","greenA200","Dropzone","apiBaseUrl","request","require","UploadScreen","props","state","role","filesPreview","filesToBeSent","draweropen","printcount","printingmessage","printButtonDisabled","setState","event","index","splice","i","push","name","handleCloseClick","acceptedFiles","rejectedFiles","length","top","alert","self","filesArray","req","post","attach","end","err","res","console","log","loginPage","appContext","uploadScreen","handleDivClick","files","onDrop","style","handleClick","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n/*\nScreen:LoginScreen\nLoginscreen is the main screen which the user is shown on first visit to page and after\nhitting logout\n*/\nimport LoginScreen from './Loginscreen';\n/*\nModule:Material-UI\nMaterial-UI is used for designing ui of the app\n*/\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Drawer from 'material-ui/Drawer';\nimport MenuItem from 'material-ui/MenuItem';\nimport FontIcon from 'material-ui/FontIcon';\nimport { blue500, red500, greenA200 } from 'material-ui/styles/colors';\n/*\nModule:Dropzone\nDropzone is used for local file selection\n*/\nimport Dropzone from 'react-dropzone';\n\nvar apiBaseUrl = 'http://localhost:3000/api/';\n/*\nModule:superagent\nsuperagent is used to handle post/get requests to server\n*/\nvar request = require('superagent');\n\nclass UploadScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      role: 'user',\n      filesPreview: [],\n      filesToBeSent: [],\n      draweropen: false,\n      printcount: 10,\n      printingmessage: '',\n      printButtonDisabled: false\n    };\n  }\n  componentWillMount() {\n    // console.log(\"prop values\",this.props.role);\n    var printcount;\n    //set upload limit based on user role\n    if (this.props.role) {\n      if (this.props.role == 'user') {\n        printcount = 5;\n      } else if (this.props.role == 'teacher') {\n        printcount = 10;\n      }\n    }\n    this.setState({ printcount, role: this.props.role });\n  }\n  /*\n  Function:handleCloseClick\n  Parameters: event,index\n  Usage:This fxn is used to remove file from filesPreview div\n  if user clicks close icon adjacent to selected file\n  */\n\n  handleCloseClick(event, index) {\n    // console.log(\"filename\",index);\n    var filesToBeSent = this.state.filesToBeSent;\n    filesToBeSent.splice(index, 1);\n    // console.log(\"files\",filesToBeSent);\n    var filesPreview = [];\n    for (var i in filesToBeSent) {\n      filesPreview.push(\n        <div>\n          {filesToBeSent[i][0].name}\n          <MuiThemeProvider>\n            <a href=\"#\">\n              <FontIcon\n                className=\"material-icons customstyle\"\n                color={blue500}\n                onClick={event => this.handleCloseClick(event, i)}\n              >\n                clear\n              </FontIcon>\n            </a>\n          </MuiThemeProvider>\n        </div>\n      );\n    }\n    this.setState({ filesToBeSent, filesPreview });\n  }\n  /*\n  Function:onDrop\n  Parameters: acceptedFiles, rejectedFiles\n  Usage:This fxn is default event handler of react drop-Dropzone\n  which is modified to update filesPreview div\n  */\n  onDrop(acceptedFiles, rejectedFiles) {\n    // console.log('Accepted files: ', acceptedFiles[0].name);\n    var filesToBeSent = this.state.filesToBeSent;\n    if (filesToBeSent.length < this.state.printcount) {\n      filesToBeSent.push(acceptedFiles);\n      var filesPreview = [];\n      for (var i in filesToBeSent) {\n        filesPreview.push(\n          <div>\n            {filesToBeSent[i][0].name}\n            <MuiThemeProvider>\n              <a href=\"#\">\n                <FontIcon\n                  className=\"material-icons customstyle\"\n                  color={blue500}\n                  styles={{ top: 10 }}\n                  onClick={event => this.handleCloseClick(event, i)}\n                >\n                  clear\n                </FontIcon>\n              </a>\n            </MuiThemeProvider>\n          </div>\n        );\n      }\n      this.setState({ filesToBeSent, filesPreview });\n    } else {\n      alert('You have reached the limit of printing files at a time');\n    }\n\n    // console.log('Rejected files: ', rejectedFiles);\n  }\n  /*\n  Function:handleClick\n  Parameters: event\n  Usage:This fxn is handler of submit button which is responsibel fo rhandling file uploads\n  to backend\n*/\n  handleClick(event) {\n    this.setState({\n      printingmessage: 'Please wait until your files are being printed',\n      printButtonDisabled: true\n    });\n    var self = this;\n    if (this.state.filesToBeSent.length > 0) {\n      var filesArray = this.state.filesToBeSent;\n      var req = request.post(apiBaseUrl + 'fileprint');\n      for (var i in filesArray) {\n        req.attach(filesArray[i][0].name, filesArray[i][0]);\n      }\n      req.end(function(err, res) {\n        if (err) {\n          console.log('error ocurred');\n        }\n        console.log('res', res);\n        self.setState({\n          printingmessage: '',\n          printButtonDisabled: false,\n          filesToBeSent: [],\n          filesPreview: []\n        });\n        alert('File printing completed');\n        // self.props.indexthis.switchPage();\n      });\n    } else {\n      alert('Please upload some files first');\n    }\n  }\n  /*\n  Function:toggleDrawer\n  Parameters: event\n  Usage:This fxn is used to toggle drawer state\n  */\n  toggleDrawer(event) {\n    this.setState({ draweropen: !this.state.draweropen });\n  }\n  /*\n  Function:toggleDrawer\n  Parameters: event\n  Usage:This fxn is used to close the drawer when user clicks anywhere on the \n  main div\n  */\n  handleDivClick(event) {\n    if (this.state.draweropen) {\n      this.setState({ draweropen: false });\n    }\n  }\n  /*\n  Function:handleLogout\n  Parameters: event\n  Usage:This fxn is used to end user session and redirect the user back to login page\n  */\n  handleLogout(event) {\n    var loginPage = [];\n    loginPage.push(<LoginScreen appContext={this.props.appContext} />);\n    this.props.appContext.setState({ loginPage: loginPage, uploadScreen: [] });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div onClick={event => this.handleDivClick(event)}>\n          <center>\n            <div>\n              You can print upto {this.state.printcount} files at a time since\n              you are {this.state.role}\n            </div>\n\n            <Dropzone onDrop={files => this.onDrop(files)}>\n              <div>\n                Try dropping some files here, or click to select files to\n                upload.\n              </div>\n            </Dropzone>\n            <div>\n              Files to be printed are:\n              {this.state.filesPreview}\n            </div>\n          </center>\n          <div>{this.state.printingmessage}</div>\n          <MuiThemeProvider>\n            <RaisedButton\n              disabled={this.state.printButtonDisabled}\n              label=\"Print Files\"\n              primary={true}\n              style={style}\n              onClick={event => this.handleClick(event)}\n            />\n          </MuiThemeProvider>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst style = {\n  margin: 15\n};\n\nexport default UploadScreen;\n"]},"metadata":{},"sourceType":"module"}