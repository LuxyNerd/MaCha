{"ast":null,"code":"import _classCallCheck from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/emine.turcan/Projekt/MaCha/Front/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/emine.turcan/Projekt/MaCha/Front/src/components/ProjectBoard.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Backlog from './Backlog';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getBacklog } from '../../actions/backlogActions';\n\nvar ProjectBoard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProjectBoard, _Component);\n\n  //constructor to handle errors\n  function ProjectBoard() {\n    var _this;\n\n    _classCallCheck(this, ProjectBoard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProjectBoard).call(this));\n    _this.state = {\n      errors: {}\n    };\n    return _this;\n  }\n\n  _createClass(ProjectBoard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id;\n      this.props.getBacklog(id);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.errors) {\n        this.setState({\n          errors: nextProps.errors\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var id = this.props.match.params.id;\n      var project_tasks = this.props.backlog.project_tasks;\n      var errors = this.state.errors;\n      var BoardContent;\n\n      var boardAlgorithm = function boardAlgorithm(errors, project_tasks) {\n        if (project_tasks.length < 1) {\n          //PROJECT IDENTIFIER BUG\n          if (errors.projectNotFound) {\n            return React.createElement(\"div\", {\n              className: \"alert alert-danger text-center\",\n              role: \"alert\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 40\n              },\n              __self: this\n            }, errors.projectNotFound);\n          } else if (errors.projectIdentifier) {\n            return React.createElement(\"div\", {\n              className: \"alert alert-danger text-center\",\n              role: \"alert\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46\n              },\n              __self: this\n            }, errors.projectIdentifier);\n          } else {\n            return React.createElement(\"div\", {\n              className: \"alert alert-info text-center\",\n              role: \"alert\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 52\n              },\n              __self: this\n            }, \"No Project Tasks on this board\");\n          }\n        } else {\n          return React.createElement(Backlog, {\n            project_tasks_prop: project_tasks,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          });\n        }\n      };\n\n      BoardContent = boardAlgorithm(errors, project_tasks);\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/addProjectTask/\".concat(id),\n        className: \"btn btn-primary mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-plus-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \" Create Project Task\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), BoardContent);\n    }\n  }]);\n\n  return ProjectBoard;\n}(Component);\n\nProjectBoard.propTypes = {\n  backlog: PropTypes.object.isRequired,\n  getBacklog: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    backlog: state.backlog,\n    errors: state.errors\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getBacklog: getBacklog\n})(ProjectBoard);","map":{"version":3,"sources":["/Users/emine.turcan/Projekt/MaCha/Front/src/components/ProjectBoard.js"],"names":["React","Component","Link","Backlog","connect","PropTypes","getBacklog","ProjectBoard","state","errors","id","props","match","params","nextProps","setState","project_tasks","backlog","BoardContent","boardAlgorithm","length","projectNotFound","projectIdentifier","propTypes","object","isRequired","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Backlog from './Backlog';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getBacklog } from '../../actions/backlogActions';\n\nclass ProjectBoard extends Component {\n  //constructor to handle errors\n  constructor() {\n    super();\n    this.state = {\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    this.props.getBacklog(id);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({ errors: nextProps.errors });\n    }\n  }\n\n  render() {\n    const { id } = this.props.match.params;\n    const { project_tasks } = this.props.backlog;\n    const { errors } = this.state;\n\n    let BoardContent;\n\n    const boardAlgorithm = (errors, project_tasks) => {\n      if (project_tasks.length < 1) {\n        //PROJECT IDENTIFIER BUG\n        if (errors.projectNotFound) {\n          return (\n            <div className=\"alert alert-danger text-center\" role=\"alert\">\n              {errors.projectNotFound}\n            </div>\n          );\n        } else if (errors.projectIdentifier) {\n          return (\n            <div className=\"alert alert-danger text-center\" role=\"alert\">\n              {errors.projectIdentifier}\n            </div>\n          );\n        } else {\n          return (\n            <div className=\"alert alert-info text-center\" role=\"alert\">\n              No Project Tasks on this board\n            </div>\n          );\n        }\n      } else {\n        return <Backlog project_tasks_prop={project_tasks} />;\n      }\n    };\n\n    BoardContent = boardAlgorithm(errors, project_tasks);\n\n    return (\n      <div className=\"container\">\n        <Link to={`/addProjectTask/${id}`} className=\"btn btn-primary mb-3\">\n          <i className=\"fas fa-plus-circle\"> Create Project Task</i>\n        </Link>\n        <br />\n        <hr />\n        {BoardContent}\n      </div>\n    );\n  }\n}\n\nProjectBoard.propTypes = {\n  backlog: PropTypes.object.isRequired,\n  getBacklog: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  backlog: state.backlog,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { getBacklog }\n)(ProjectBoard);\n"]},"metadata":{},"sourceType":"module"}